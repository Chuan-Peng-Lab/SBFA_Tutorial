axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(`Bayes Factor` = tidyr::replace_na(`Bayes Factor`, 1)) %>%
ggplot(aes(x = n, y = `Bayes Factor`)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(-10, 500),
breaks = c(10, 1000, 2000, 3000, 4000, 5000)) +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(`Bayes Factor` = tidyr::replace_na(`Bayes Factor`, 1)) %>%
ggplot(aes(x = n, y = `Bayes Factor`)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(-10, 5000),
breaks = c(10, 1000, 2000, 3000, 4000, 5000)) +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(`Bayes Factor` = tidyr::replace_na(`Bayes Factor`, 1))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(`Bayes Factor` = tidyr::replace_na(`Bayes Factor`, 1)) %>%
ggplot(aes(x = n, y = `Bayes Factor`)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(10, 5000),
breaks = c(10, 1000, 2000, 3000, 4000, 5000)) +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(`Bayes Factor` = tidyr::replace_na(`Bayes Factor`, 1))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(`Bayes Factor` = tidyr::replace_na(`Bayes Factor`, 1)) %>%
ggplot(aes(x = n, y = `Bayes Factor`)) +
geom_point(size = 3) +
geom_line()
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(`Bayes Factor` = tidyr::replace_na(`Bayes Factor`, 1)) %>%
ggplot(aes(x = n, y = `Bayes Factor`)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(10, 7000),
breaks = c(10, 1000, 2000, 3000, 4000, 5000, 6000, 7000)) +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(`Bayes Factor` = tidyr::replace_na(`Bayes Factor`, 1))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(`Bayes Factor` = tidyr::replace_na(`Bayes Factor`, 1)) %>%
ggplot(aes(x = n, y = `Bayes Factor`)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(10, 7000),
breaks = c(10, 1000, 2000, 3000, 4000, 5000, 6000, 7000)) +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(`Bayes Factor` = tidyr::replace_na(`Bayes Factor`, 1)) %>%
ggplot(aes(x = n, y = `Bayes Factor`)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(1, 10, 7000),
breaks = c(10, 1000, 2000, 3000, 4000, 5000, 6000, 7000)) +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(`Bayes Factor` = tidyr::replace_na(`Bayes Factor`, 1)) %>%
ggplot(aes(x = n, y = `Bayes Factor`)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(1, 6000),
breaks = c(1, 10, 1000, 2000, 3000, 4000, 5000, 6000)) +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(`Bayes Factor` = tidyr::replace_na(`Bayes Factor`, 1)) %>%
ggplot(aes(x = n, y = `Bayes Factor`)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(1, 6000),
breaks = c(10, 1000, 2000, 3000, 4000, 5000, 6000)) +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
?nrow
2.203e-10/4.540e-13
aov_output
df_anova
?rnorm()
df_anova <- df_anova %>%
mutate_if(is.character, as.factor) %>%
mutate(cov1 = rnorm(5, 1),
cov2 = rnorm(4,1))
df_anova <- df_anova %>%
mutate_if(is.character, as.factor) %>%
mutate(nrow(.),cov1 = rnorm(5, 1),
cov2 = rnorm(nrow(.),4,1))
df_anova <- df_anova %>%
mutate_if(is.character, as.factor) %>%
mutate(cov1 = rnorm(nrow(.),5, 1),
cov2 = rnorm(nrow(.),4,1))
library(bruceR)
?MANOVA()
df_anova
MANOVA(df_anova, subID = "subj_idx", dv = "rt", within = c("Matchness", "Valence"))
MANOVA(df_anova, subID = "subj_idx", dv = "rt",
within = c("Matchness", "Valence"), covariate = c("cov1", "cov2"))
MANOVA(df_anova, subID = "subj_idx", dv = "rt",
within = c("Matchness", "Valence"), covariate = c("cov1", "cov2"), sph.correction = "GG")
MANOVA(df_anova, subID = "subj_idx", dv = "rt",
within = c("Matchness", "Valence"), covariate = "cov1", sph.correction = "GG")
df_anova
MANOVA(df_anova, subID = "subj_idx", dv = "rt",
within = c("Matchness", "Valence"), cov= "cov1", sph.correction = "GG")
df_anova <- df_anova %>%
mutate_if(is.character, as.factor) %>%
mutate(cov1 = rnorm(nrow(.),0, 1),
cov2 = rnorm(nrow(.),4,1))
library(bruceR)
MANOVA(df_anova, subID = "subj_idx", dv = "rt",
within = c("Matchness", "Valence"), cov= "cov1", sph.correction = "GG")
aov_ez("subj_idx", "rt", df_anova, within = c("Matchness", "Valence"), covariate = "cov1",
factorize = FALSE)
afex::aov_ez("subj_idx", "rt", df_anova, within = c("Matchness", "Valence"), covariate = "cov1",
factorize = FALSE)
afex::aov_ez("subj_idx", "rt", df_anova, within = c("Matchness", "Valence"), covariate = "cov1",
factorize = FALSE)
afex::aov_ez("subj_idx", "rt", df_anova, within = c("Matchness", "Valence"),
)
View(df_anova)
df_anova <- df_anova %>%
mutate_if(is.character, as.factor) %>%
mutate(cov1 = rnorm(nrow(.),0, 1),
cov2 = scale(rnorm(nrow(.),4,1)))
library(bruceR)
MANOVA(df_anova, subID = "subj_idx", dv = "rt",
within = c("Matchness", "Valence"), cov= "cov1", sph.correction = "GG")
afex::aov_ez("subj_idx", "rt", df_anova, within = c("Matchness", "Valence"),
)
afex::aov_ez("subj_idx", "rt", df_anova, within = c("Matchness", "Valence"), cov= "cov1"
)
rm(list = ls())
# install.packages(c("tidyverse", "BayesFactor", "here"))
library(BayesFactor)#计算T检验和方差分析的贝叶斯因子
library(here)
here()
options(scipen = 9)#将科学计数法改为在万后9位
df <- readr::read_csv(here("2_Data", "df.sum_jasp.csv"))
#分析因变量为RT的使用数据
df.RT <- df %>%
#选择被试信息以及RT_开头的列
dplyr::select(subj_idx, starts_with("RT_")) %>%
#RT_Bad_Match到RT_Good_Nonmatch列转换为长数据，列名为condition，值名为rt
tidyr::pivot_longer(
cols = RT_Bad_Match:RT_Neutral_Nonmatch,
names_to = "condition",
values_to = "rt"
) %>%
#将condition列拆分为三列，DV_Name为因变量名称
#Valence是道德信息，Matchness是匹配信息
tidyr::separate(col = condition,
into = c("DV_Name", "Valence", "Matchness"),
sep = "_") %>%
#类型为character的转换为因子类型，便于后续分析
dplyr::mutate_if(is.character, as.factor)
rm(list = ls())
# install.packages(c("tidyverse", "BayesFactor", "here"))
library(BayesFactor)#计算T检验和方差分析的贝叶斯因子
library(tidyverse)
library(tidyverse)
library(here)
here()
options(scipen = 9)#将科学计数法改为在万后9位
df <- readr::read_csv(here("2_Data", "df.sum_jasp.csv"))
#分析因变量为RT的使用数据
df.RT <- df %>%
#选择被试信息以及RT_开头的列
dplyr::select(subj_idx, starts_with("RT_")) %>%
#RT_Bad_Match到RT_Good_Nonmatch列转换为长数据，列名为condition，值名为rt
tidyr::pivot_longer(
cols = RT_Bad_Match:RT_Neutral_Nonmatch,
names_to = "condition",
values_to = "rt"
) %>%
#将condition列拆分为三列，DV_Name为因变量名称
#Valence是道德信息，Matchness是匹配信息
tidyr::separate(col = condition,
into = c("DV_Name", "Valence", "Matchness"),
sep = "_") %>%
#类型为character的转换为因子类型，便于后续分析
dplyr::mutate_if(is.character, as.factor)
df.ACC <- df %>%
dplyr::select(subj_idx, starts_with("ACC_")) %>%
tidyr::pivot_longer(
cols = ACC_Bad_Match:ACC_Neutral_Nonmatch,
names_to = "condition",
values_to = "ACC"
) %>%
tidyr::separate(col = condition,
into = c("DV_Name", "Valence", "Matchness"),
sep = "_") %>%
dplyr::mutate_if(is.character, as.factor)
head(df.ACC)
df.dPrime <- df %>%
dplyr::select(subj_idx, starts_with("dPrime_")) %>%
tidyr::pivot_longer(
cols = dPrime_Bad:dPrime_Neutral,
names_to = "condition",
values_to = "dPrime"
) %>%
tidyr::separate(col = condition,
into = c("DV_Name", "Valence"),
sep = "_") %>%
dplyr::mutate_if(is.character, as.factor)
head(df.dPrime)
bayesfactors <- BayesFactor::generalTestBF(
rt ~ Valence*Matchness*subj_idx - subj_idx:Valence:Matchness,
data = data.frame(df.RT),
whichRandom = "subj_idx",
neverExclude = "subj_idx",
whichModels = "all")
bayesfactors
#感兴趣的效应都要先除零模型（仅包括随机效应的模型）
null <- bayesfactors[8]
#全模型
full <- bayesfactors[7]
BF_full.n <- full/null#全模型与null对比
BF_excinx.n <- bayesfactors[4]/null
BF_inx <- BF_full.n/BF_excinx.n
BF_inx
rm(list = ls())
# install.packages(c("tidyverse", "BayesFactor", "here"))
library(BayesFactor)#计算T检验和方差分析的贝叶斯因子
library(tidyverse)
library(here)
here()
options(scipen = 9)#将科学计数法改为在万后9位
package_version(BayesFactor)
package_version("BayesFactor")
# install.packages(c("tidyverse", "BayesFactor", "here"))
library(BayesFactor)#计算T检验和方差分析的贝叶斯因子
package_version("BayesFactor")
packageVersion("BayesFactor")
print(packageVersion("BayesFactor"))
print("BayesFactor程序包的版本是" + packageVersion("BayesFactor"))
print("BayesFactor程序包的版本是" packageVersion("BayesFactor"))
print("BayesFactor程序包的版本是"packageVersion("BayesFactor"))
print("BayesFactor程序包的版本是"+packageVersion("BayesFactor"))
print("BayesFactor程序包的版本是"， packageVersion("BayesFactor"))
print("BayesFactor程序包的版本是", packageVersion("BayesFactor"))
cat("BayesFactor程序包的版本是", packageVersion("BayesFactor"))
a <-
cat("BayesFactor程序包的版本是", packageVersion("BayesFactor"))
a <- packageVersion("BayesFactor")
a
str(a)
packageVersion("BayesFactor")
## BayesFacotr包版本
```{r}
packageVersion("BayesFactor")
packageVersion(BayesFactor)
"
packageVersion("BayesFactor")
packageVersion("BayesFactor")
df <- readr::read_csv(here("2_Data", "df.sum_jasp.csv"))
#分析因变量为RT的使用数据
df.RT <- df %>%
#选择被试信息以及RT_开头的列
dplyr::select(subj_idx, starts_with("RT_")) %>%
#RT_Bad_Match到RT_Good_Nonmatch列转换为长数据，列名为condition，值名为rt
tidyr::pivot_longer(
cols = RT_Bad_Match:RT_Neutral_Nonmatch,
names_to = "condition",
values_to = "rt"
) %>%
#将condition列拆分为三列，DV_Name为因变量名称
#Valence是道德信息，Matchness是匹配信息
tidyr::separate(col = condition,
into = c("DV_Name", "Valence", "Matchness"),
sep = "_") %>%
#类型为character的转换为因子类型，便于后续分析
dplyr::mutate_if(is.character, as.factor)
df.ACC <- df %>%
dplyr::select(subj_idx, starts_with("ACC_")) %>%
tidyr::pivot_longer(
cols = ACC_Bad_Match:ACC_Neutral_Nonmatch,
names_to = "condition",
values_to = "ACC"
) %>%
tidyr::separate(col = condition,
into = c("DV_Name", "Valence", "Matchness"),
sep = "_") %>%
dplyr::mutate_if(is.character, as.factor)
df.dPrime <- df %>%
dplyr::select(subj_idx, starts_with("dPrime_")) %>%
tidyr::pivot_longer(
cols = dPrime_Bad:dPrime_Neutral,
names_to = "condition",
values_to = "dPrime"
) %>%
tidyr::separate(col = condition,
into = c("DV_Name", "Valence"),
sep = "_") %>%
dplyr::mutate_if(is.character, as.factor)
subj_num <- unique(df$subj_idx) # 每个被试的编号
n <- length(unique(df$subj_idx)) # 一共有20个被试
bf_output <- rep(NA, length(subj_num)) ### 先建立一个列表
df.RT
df
?ttestBF
ttestBF(df$RT_Good_Match, df$RT_Neutral_Match, paired = TRUE)
ttestBF(df$RT_Good_Match, df$RT_Neutral_Match, paired = TRUE, , nullInterval = c(Inf, 0))
ttestBF(df$RT_Good_Match, df$RT_Neutral_Match, paired = TRUE, nullInterval = c(Inf, 0))
ttestBF(df$RT_Good_Match, df$RT_Neutral_Match, paired = TRUE, nullInterval = c(0, Inf))
a <- ttestBF(df$RT_Good_Match, df$RT_Neutral_Match, paired = TRUE, nullInterval = c(0, Inf))
a[2]
c(a[2])
a[1]
a <- ttestBF(df$RT_Good_Match, df$RT_Neutral_Match, paired = TRUE, nullInterval = c(0, Inf))
ttestBF(df$RT_Good_Match, df$RT_Neutral_Match, paired = TRUE, nullInterval = c(0, Inf))
ttestBF(df$RT_Good_Match, df$RT_Neutral_Match, paired = TRUE, nullInterval = c(Inf, 0))
ttestBF(df$RT_Good_Match, df$RT_Neutral_Match, paired = TRUE, nullInterval = c(0, Inf))
ttestBF(df$RT_Good_Match, df$RT_Neutral_Match, paired = TRUE, nullInterval = c(0, Inf))
a <- ttestBF(df$RT_Good_Match, df$RT_Neutral_Match, paired = TRUE, nullInterval = c(0, Inf))
View(a)
a@numerator[["Alt., r=0.707 !(0<d<Inf)"]]
a[2]
