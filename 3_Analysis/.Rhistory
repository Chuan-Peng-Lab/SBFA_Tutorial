axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
dat_plot %>% dplyr::filter(Effect == "BFs_int") %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
labs(y = TeX("$\\log(BF_{10}) $")) +
ggtitle("The Bayes Factor of RT Interaction Effect") +
scale_y_continuous(
limits = c(0, 25),
breaks = c(1/10, 1, 10, 20)) +
theme(
panel.background = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
dat_plot %>% dplyr::filter(Effect == "BFs_int") %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 0), linetype = "dashed")+
labs(y = TeX("$\\log(BF_{10}) $")) +
ggtitle("The Bayes Factor of RT Interaction Effect") +
scale_y_continuous(
limits = c(0, 25),
breaks = c(1/10, 1, 10, 20)) +
theme(
panel.background = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
dat_plot %>% dplyr::filter(Effect == "BFs_int") %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 0), linetype = "dashed")+
labs(y = TeX("$\\log(BF_{10}) $")) +
ggtitle("The Bayes Factor of RT Interaction Effect") +
scale_y_continuous(
limits = c(0, 25),
breaks = c(1, 10, 20)) +
theme(
panel.background = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
dat_plot %>% dplyr::filter(Effect == "BFs_int") %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 0), linetype = "dashed")+
geom_hline(aes(yintercept = 1), linetype = "dashed")+
labs(y = TeX("$\\log(BF_{10}) $")) +
ggtitle("The Bayes Factor of RT Interaction Effect") +
scale_y_continuous(
limits = c(0, 25),
breaks = c(0, 1, 10, 20)) +
theme(
panel.background = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
ggsave("RT_inx.png", width = 10, height = 7, dpi = 300)
dat_plot %>% dplyr::filter(Effect == "BFs_int") %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 0), linetype = "dashed")+
geom_hline(aes(yintercept = 1), linetype = "dashed")+
labs(y = TeX("$\\log(BF_{10}) $")) +
ggtitle("The Bayes Factor of RT Interaction Effect") +
scale_y_continuous(
limits = c(0, 10),
breaks = c(0, 1, 2, 3)) +
theme(
panel.background = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
dat_plot
dat_plot %>% dplyr::filter(Effect == "BFs_int") %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 0), linetype = "dashed")+
geom_hline(aes(yintercept = 1), linetype = "dashed")+
labs(y = TeX("$\\log(BF_{10}) $")) +
ggtitle("The Bayes Factor of RT Interaction Effect") +
scale_y_continuous(
limits = c(0, 25),
breaks = c(0, 1, 2, 4, 8, 16)) +
theme(
panel.background = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
dat_plot %>% dplyr::filter(Effect == "BFs_int") %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 0), linetype = "dashed")+
geom_hline(aes(yintercept = 1), linetype = "dashed")+
labs(y = TeX("$\\log(BF_{10}) $")) +
ggtitle("The Bayes Factor of RT Interaction Effect") +
scale_y_continuous(
limits = c(0, 25),
breaks = c(0, 1, 10, 20)) +
theme(
panel.background = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
head(df.ACC)
rm(list = ls())
# install.packages(c("tidyverse", "BayesFactor", "here"))
library(BayesFactor)#计算T检验和方差分析的贝叶斯因子
library(tidyverse)
library(showtext)#解决中文字体无法显示问题
library(latex2exp)#latex语法
font_add("song",
"/System/Library/Fonts/Supplemental/Songti.ttc")
##从系统增加宋体子
showtext_auto()
library(here)
here()
options(scipen = 9)#将科学计数法改为在万后9位
set.seed(1234)
packageVersion("BayesFactor")
df <- readr::read_csv(here("2_Data", "df.sum_jasp.csv"))
#分析因变量为RT的使用数据
df.RT <- df %>%
#选择被试信息以及RT_开头的列
dplyr::select(subj_idx, starts_with("RT_")) %>%
#RT_Bad_Match到RT_Good_Nonmatch列转换为长数据，列名为condition，值名为rt
tidyr::pivot_longer(
cols = RT_Bad_Match:RT_Neutral_Nonmatch,
names_to = "condition",
values_to = "rt"
) %>%
#将condition列拆分为三列，DV_Name为因变量名称
#Valence是道德信息，Matchness是匹配信息
tidyr::separate(col = condition,
into = c("DV_Name", "Valence", "Matchness"),
sep = "_") %>%
#类型为character的转换为因子类型，便于后续分析
dplyr::mutate_if(is.character, as.factor)
head(df.RT)
df.ACC <- df %>%
dplyr::select(subj_idx, starts_with("ACC_")) %>%
tidyr::pivot_longer(
cols = ACC_Bad_Match:ACC_Neutral_Nonmatch,
names_to = "condition",
values_to = "ACC"
) %>%
tidyr::separate(col = condition,
into = c("DV_Name", "Valence", "Matchness"),
sep = "_") %>%
dplyr::mutate_if(is.character, as.factor)
head(df.ACC)
df.dPrime <- df %>%
dplyr::select(subj_idx, starts_with("dPrime_")) %>%
tidyr::pivot_longer(
cols = dPrime_Bad:dPrime_Neutral,
names_to = "condition",
values_to = "dPrime"
) %>%
tidyr::separate(col = condition,
into = c("DV_Name", "Valence"),
sep = "_") %>%
dplyr::mutate_if(is.character, as.factor)
head(df.dPrime)
bayesfactors <- BayesFactor::generalTestBF(
rt ~ Valence*Matchness*subj_idx - subj_idx:Valence:Matchness,
data = data.frame(df.RT),
whichRandom = "subj_idx",
neverExclude = "subj_idx",
whichModels = "all")
rm(list = ls())
# install.packages(c("tidyverse", "BayesFactor", "here"))
library(BayesFactor)#计算T检验和方差分析的贝叶斯因子
library(tidyverse)
library(showtext)#解决中文字体无法显示问题
library(latex2exp)#latex语法
font_add("song",
"/System/Library/Fonts/Supplemental/Songti.ttc")
##从系统增加宋体子
showtext_auto()
library(here)
here()
options(scipen = 6)#将科学计数法改为在万后6位
set.seed(1234)
packageVersion("BayesFactor")
df <- readr::read_csv(here("2_Data", "df.sum_jasp.csv"))
#分析因变量为RT的使用数据
df.RT <- df %>%
#选择被试信息以及RT_开头的列
dplyr::select(subj_idx, starts_with("RT_")) %>%
#RT_Bad_Match到RT_Good_Nonmatch列转换为长数据，列名为condition，值名为rt
tidyr::pivot_longer(
cols = RT_Bad_Match:RT_Neutral_Nonmatch,
names_to = "condition",
values_to = "rt"
) %>%
#将condition列拆分为三列，DV_Name为因变量名称
#Valence是道德信息，Matchness是匹配信息
tidyr::separate(col = condition,
into = c("DV_Name", "Valence", "Matchness"),
sep = "_") %>%
#类型为character的转换为因子类型，便于后续分析
dplyr::mutate_if(is.character, as.factor)
head(df.RT)
df.ACC <- df %>%
dplyr::select(subj_idx, starts_with("ACC_")) %>%
tidyr::pivot_longer(
cols = ACC_Bad_Match:ACC_Neutral_Nonmatch,
names_to = "condition",
values_to = "ACC"
) %>%
tidyr::separate(col = condition,
into = c("DV_Name", "Valence", "Matchness"),
sep = "_") %>%
dplyr::mutate_if(is.character, as.factor)
head(df.ACC)
df.dPrime <- df %>%
dplyr::select(subj_idx, starts_with("dPrime_")) %>%
tidyr::pivot_longer(
cols = dPrime_Bad:dPrime_Neutral,
names_to = "condition",
values_to = "dPrime"
) %>%
tidyr::separate(col = condition,
into = c("DV_Name", "Valence"),
sep = "_") %>%
dplyr::mutate_if(is.character, as.factor)
head(df.dPrime)
bayesfactors <- BayesFactor::generalTestBF(
rt ~ Valence*Matchness*subj_idx - subj_idx:Valence:Matchness,
data = data.frame(df.RT),
whichRandom = "subj_idx",
neverExclude = "subj_idx",
whichModels = "all")
bayesfactors
#感兴趣的效应都要先除零模型（仅包括随机效应的模型）
null <- bayesfactors[8]
#全模型
full <- bayesfactors[7]
BF_full.n <- full/null#全模型与null对比
BF_excinx.n <- bayesfactors[4]/null
BF_inx <- BF_full.n/BF_excinx.n
BF_inx
BF_m.n <- bayesfactors[2]/null
BF_excinx.n/BF_m.n
BF_v.n <- bayesfactors[1]/null
BF_excinx.n/BF_v.n
ttestBF(df$RT_Good_Match,
df$RT_Neutral_Match,
paired = TRUE,
nullInterval = c(Inf, 0))[2]
subj_num <- unique(df.RT$subj_idx) # 每个被试的编号
n <- length(unique(df.RT$subj_idx)) # 一共有20个被试
n
bf_output <- rep(1, length(subj_num)) ### 先建立一个列表
for (i in seq_along(subj_num)) {#i遍历subj_num
if (i == 1) {
next
#由于一个被试不能正确计算贝叶斯因子，所以当i等于1时，跳过
}
#将df数据框中的subj_idx列转换为字符串型
df$subj_idx <- as.character(df$subj_idx)
#提取出遍历到的被试编号
id <- unique(df$subj_idx)[1:i]
#从愿数据中筛选被试
df.selected <- df %>% filter(subj_idx %in% id)
#转换为因子型
df.selected$subj_idx <- as.factor(df.selected$subj_idx)
#计算贝叶斯因子
bayesfactors <- ttestBF(df.selected$RT_Good_Match,
df.selected$RT_Neutral_Match,
paired = TRUE,
nullInterval = c(0, Inf))
bf_output[i] <- bayesfactors[2]
}
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(logBF = log(`Bayes Factor`)) %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
geom_hline(aes(yintercept = 1/10), linetype = "dashed") +
scale_y_continuous(
limits = c(0, 12),
breaks = c(1/10, 1, 5, 10)) +
labs(y = TeX("$\\log(BF_{10}) $")) +
theme(
panel.background = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
subj_num <- unique(df.RT$subj_idx) # 每个被试的编号
n <- length(unique(df.RT$subj_idx)) # 一共有20个被试
n
BFs_match <- rep(1, length(subj_num))
BFs_valence <- rep(1, length(subj_num))
BFs_int <- rep(1, length(subj_num))
for (i in seq_along(subj_num)) {
if (i == 1) {
next
}
df.RT$subj_idx <- as.character(df.RT$subj_idx)
id <- unique(df.RT$subj_idx)[1:i]
df.selected <- df.RT %>% dplyr::filter(subj_idx %in% id)
df.selected$subj_idx <- as.factor(df.selected$subj_idx)
df.selected$Matchness <- as.factor(df.selected$Matchness)
df.selected$Valence <- as.factor(df.selected$Valence)
bayesfactors <- BayesFactor::generalTestBF(
rt ~ Valence*Matchness*subj_idx - subj_idx:Valence:Matchness,
data = data.frame(df.selected),
whichRandom = "subj_idx",
neverExclude = "subj_idx",
whichModels = "all", progress = FALSE)
null <- bayesfactors[8]
full <- bayesfactors[7]#全模型
BF_full.n <- full/null#全模型与null对比
BF_excinx.n <- bayesfactors[4]/null
BF_m.n <- bayesfactors[2]/null
BF_v.n <- bayesfactors[1]/null
BFs_match[i] <- BF_excinx.n/BF_v.n#计算Matchness主效应的BF
BFs_valence[i] <- BF_excinx.n/BF_m.n#计算Valence的BF
BFs_int[i] <- BF_full.n/BF_excinx.n#计算交互项的BF
}
aov_output <- tibble::tibble(BFs_int, BFs_valence, BFs_match)#整合为数据框
aov_output$BFs_int <- round(aov_output$BFs_int, digits = 2)#保留两位小数
aov_output$BFs_valence <- round(aov_output$BFs_valence, digits = 2)
aov_output$BFs_match <- round(aov_output$BFs_match, digits = 2)
head(aov_output)#查看数据
dat_plot <- aov_output %>% dplyr::mutate(n = 1:nrow(.)) %>%
tidyr::pivot_longer(BFs_int:BFs_match, names_to = "Effect",
values_to = "Bayes Factor") %>%
dplyr::mutate(`logBF` = log(`Bayes Factor`))
a <- dat_plot %>%
filter(Effect == "BFs_int")
a
dat_plot %>% dplyr::filter(Effect == "BFs_int") %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 0), linetype = "dashed")+
geom_hline(aes(yintercept = 1), linetype = "dashed")+
labs(y = TeX("$\\log(BF_{10}) $")) +
ggtitle("交互作用的贝叶斯因子数值变化趋势") +
scale_y_continuous(
limits = c(0, 25),
breaks = c(0, 1, 10, 20)) +
theme(
panel.background = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22,
family = "song",
face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
# ggsave("RT_inx.png", width = 10, height = 7, dpi = 300)
plot(1:10)
plot(1:10)
plot(pressure)
df <- readr::read_csv(here("/Users/zhengyuanrui/SBFA_Tutorial", "2_Data", "df.sum_jasp.csv"))
format(Sys.time(), '%B %d, %Y')
format(Sys.time(), '%B %d, %Y')
Sys.time()
format(Sys.Date(), "%Y-%m-%d %w")
format(Sys.Date(), "%Y-%m-%d")
