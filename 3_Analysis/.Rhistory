margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
library(tikzDevice)
install.packages(tikzDevice)
install.packages("tikzDevice")
# install.packages("tikzDevice")
library(tikzDevice)
# install.packages("tikzDevice")
library(tikzDevice)
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(logBF = log(`Bayes Factor`)) %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(0, 15),
breaks = c(1/10, 1, 5, 10)) +
ylab(label = "$f(x)=\\frac{\\alpha}{1 + exp( - \\beta (x-\\gamma) )}+\\varepsilon$") +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tikzDevice::tikz(file = "./example_plot_2.tex", width = 5, height = 3)
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(logBF = log(`Bayes Factor`)) %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(0, 15),
breaks = c(1/10, 1, 5, 10)) +
ylab(label = "$f(x)=\\frac{\\alpha}{1 + exp( - \\beta (x-\\gamma) )}+\\varepsilon$") +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(logBF = log(`Bayes Factor`)) %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(0, 13),
breaks = c(1/10, 1, 5, 10)) +
ylab(label = "$f(x)=\\frac{\\alpha}{1 + exp( - \\beta (x-\\gamma) )}+\\varepsilon$") +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tikzDevice::tikz(file = "./example_plot_2.tex", width = 5, height = 3)
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(logBF = log(`Bayes Factor`)) %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(0, 13),
breaks = c(1/10, 1, 5, 10)) +
ylab(label = "$f(x)=\\frac{\\alpha}{1 + exp( - \\beta (x-\\gamma) )}+\\varepsilon$") +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(logBF = log(`Bayes Factor`)) %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(0, 13),
breaks = c(1/10, 1, 5, 10)) +
ylab(label = "log(BF_10)") +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(logBF = log(`Bayes Factor`)) %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(0, 12),
breaks = c(1/10, 1, 5, 10)) +
ylab(label = "log(BF_10)") +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
bf_output
subj_num <- unique(df.RT$subj_idx) # 每个被试的编号
n <- length(unique(df.RT$subj_idx)) # 一共有20个被试
n
BFs_match <- rep(1, length(subj_num))
BFs_valence <- rep(1, length(subj_num))
BFs_int <- rep(1, length(subj_num))
bayesfactors[4]
bayesfactors <- BayesFactor::generalTestBF(
rt ~ Valence*Matchness*subj_idx - subj_idx:Valence:Matchness,
data = data.frame(df.RT),
whichRandom = "subj_idx",
neverExclude = "subj_idx",
whichModels = "all")
bayesfactors
bayesfactors[4]
#感兴趣的效应都要先除零模型（仅包括随机效应的模型）
null <- bayesfactors[8]
#全模型
full <- bayesfactors[7]
BF_full.n <- full/null#全模型与null对比
BF_excinx.n <- bayesfactors[4]/null
BF_inx <- BF_full.n/BF_excinx.n
BF_inx
bayesfactors[4]/null
BF_excinx.n
BF_excinx.n
BF_m.n <- bayesfactors[2]/null
BF_excinx.n/BF_m.n
BF_v.n <- bayesfactors[1]/null
BF_excinx.n/BF_v.n
BFs_match <- rep(1, length(subj_num))
BFs_valence <- rep(1, length(subj_num))
BFs_int <- rep(1, length(subj_num))
for (i in seq_along(subj_num)) {
if (i == 1) {
next
}
df_anova$subj_idx <- as.character(df.RT$subj_idx)
id <- unique(df.RT$subj_idx)[1:i]
df.selected <- df.RT %>% dplyr::filter(subj_idx %in% id)
df.selected$subj_idx <- as.factor(df.selected$subj_idx)
df.selected$Matchness <- as.factor(df.selected$Matchness)
df.selected$Valence <- as.factor(df.selected$Valence)
bayesfactors <- BayesFactor::generalTestBF(
rt ~ Valence*Matchness*subj_idx - subj_idx:Valence:Matchness,
data = data.frame(df.selected),
whichRandom = "subj_idx",
neverExclude = "subj_idx",
whichModels = "all", progress = FALSE)
null <- bayesfactors[8]
full <- bayesfactors[7]#全模型
BF_full.n <- full/null#全模型与null对比
BF_excinx.n <- bayesfactors[4]/null
BF_m.n <- bayesfactors[2]/null
BF_v.n <- bayesfactors[1]/null
BFs_match[i] <- BF_excinx.n/BF_v.n#计算Matchness主效应的BF
BFs_valence[i] <- BF_excinx.n/BF_m.n#计算Valence的BF
BFs_int[i] <- BF_full.n/BF_excinx.n#计算交互项的BF
}
for (i in seq_along(subj_num)) {
if (i == 1) {
next
}
df.RT$subj_idx <- as.character(df.RT$subj_idx)
id <- unique(df.RT$subj_idx)[1:i]
df.selected <- df.RT %>% dplyr::filter(subj_idx %in% id)
df.selected$subj_idx <- as.factor(df.selected$subj_idx)
df.selected$Matchness <- as.factor(df.selected$Matchness)
df.selected$Valence <- as.factor(df.selected$Valence)
bayesfactors <- BayesFactor::generalTestBF(
rt ~ Valence*Matchness*subj_idx - subj_idx:Valence:Matchness,
data = data.frame(df.selected),
whichRandom = "subj_idx",
neverExclude = "subj_idx",
whichModels = "all", progress = FALSE)
null <- bayesfactors[8]
full <- bayesfactors[7]#全模型
BF_full.n <- full/null#全模型与null对比
BF_excinx.n <- bayesfactors[4]/null
BF_m.n <- bayesfactors[2]/null
BF_v.n <- bayesfactors[1]/null
BFs_match[i] <- BF_excinx.n/BF_v.n#计算Matchness主效应的BF
BFs_valence[i] <- BF_excinx.n/BF_m.n#计算Valence的BF
BFs_int[i] <- BF_full.n/BF_excinx.n#计算交互项的BF
}
aov_output <- tibble::tibble(BFs_int, BFs_valence, BFs_match)#整合为数据框
aov_output$BFs_int <- round(aov_output$BFs_int, digits = 2)#保留两位小数
aov_output$BFs_valence <- round(aov_output$BFs_valence, digits = 2)
aov_output$BFs_match <- round(aov_output$BFs_match, digits = 2)
aov_output
dat_plot <- aov_output %>% dplyr::mutate(n = 1:nrow(.)) %>%
tidyr::pivot_longer(BFs_int:BFs_match, names_to = "Effect",
values_to = "Bayes Factor") %>%
dplyr::mutate(`logBF` = log(`Bayes Factor`))
dat_plot <- aov_output %>% dplyr::mutate(n = 1:nrow(.)) %>%
tidyr::pivot_longer(BFs_int:BFs_match, names_to = "Effect",
values_to = "Bayes Factor") %>%
dplyr::mutate(`logBF` = log(`Bayes Factor`))
dat_plot
dat_plot %>%
filter(Effect == BFs_int) %>%
summarise(max(logBF), min(logBF))
dat_plot %>%
filter(Effect == BFs_int) %>%
summarise(a= max(logBF), b = min(logBF))
dat_plot %>%
filter(Effect == BFs_int)
dat_plot
dat_plot %>%
filter(Effect == BFs_int)
dat_plot %>%
filter(Effect == "BFs_int")
dat_plot %>%
filter(Effect == "BFs_int") %>%
summarise(a= max(logBF), b = min(logBF))
a <- dat_plot %>%
filter(Effect == "BFs_int")
a
dat_plot %>% dplyr::filter(Effect == "BFs_int") %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(0, 25),
breaks = c(0, 1/10, 1, 10, 20)) +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
dat_plot %>% dplyr::filter(Effect == "BFs_int") %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
scale_y_continuous(
limits = c(0, 25),
breaks = c(1/10, 1, 10, 20)) +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(logBF = log(`Bayes Factor`)) %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
geom_hline(aes(yintercept = 1/10), linetype = "dashed") +
scale_y_continuous(
limits = c(0, 12),
breaks = c(1/10, 1, 5, 10)) +
ylab(label = "log(BF_10)") +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
tibble(bf_output)
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(logBF = log(`Bayes Factor`))
tibble(bf_output) %>%
dplyr::mutate(n = 1:nrow(.)) %>%
dplyr::rename("Bayes Factor" = "bf_output") %>%
dplyr::mutate(logBF = log(`Bayes Factor`)) %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
geom_hline(aes(yintercept = 10), linetype = "dashed") +
geom_hline(aes(yintercept = 1/10), linetype = "dashed") +
scale_y_continuous(
limits = c(0, 12),
breaks = c(1/10, 1, 5, 10)) +
ylab(label = "log(BF_10)") +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
dat_plot %>% dplyr::filter(Effect == "BFs_int") %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
ylab(label = "log(BF_10)") +
scale_y_continuous(
limits = c(0, 25),
breaks = c(1/10, 1, 10, 20)) +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
?ggtitle()
dat_plot %>% dplyr::filter(Effect == "BFs_int") %>%
ggplot(aes(x = n, y = logBF)) +
geom_point(size = 3) +
geom_line() +
ylab(label = "log(BF_10)") +
ggtitle("The Bayes Factor of RT Interaction Effect") +
scale_y_continuous(
limits = c(0, 25),
breaks = c(1/10, 1, 10, 20)) +
theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA))
ggsave("RT_inx.png", width = 10, height = 7, dpi = 300)
# ggsave("RT_inx.png", width = 10, height = 7, dpi = 300)
getwd
# ggsave("RT_inx.png", width = 10, height = 7, dpi = 300)
getwd()
